=============================================================================
List of generated methods in project: MDIO_Enet_S32K148

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_SYS_Init -Install pre-defined clock configurations.
   - clockMan1_CLOCK_SYS_UpdateConfiguration -Set system clock configuration according to pre-defined structure.
   - clockMan1_CLOCK_SYS_SetConfiguration -Set system clock configuration.
   - clockMan1_CLOCK_SYS_GetCurrentConfiguration -Get current system clock configuration.
   - clockMan1_CLOCK_SYS_GetErrorCallback -Get the callback which returns error in last clock switch.
   - clockMan1_CLOCK_SYS_GetFreq -Gets the clock frequency for a specific clock name.
   - clockMan1_CLOCK_DRV_Init -Initialize clocking modules
   - clockMan1_CLOCK_DRV_GetFreq -Return frequency
   - clockMan1_CLOCK_DRV_EnablePeripheralClock -Enables peripheral clock
   - clockMan1_CLOCK_DRV_DisablePeripheralClock -Disables peripheral clock
   - clockMan1_CLOCK_DRV_SetSystemClock -Configures the system clocks
   - clockMan1_CLOCK_DRV_GetSystemClockSource -Gets the system clock source
   - clockMan1_CLOCK_DRV_SetIrc -Enable or disable SIRC clock source.
   - clockMan1_CLOCK_DRV_SetXosc -Enable or disable SOSC clock source
   - clockMan1_CLOCK_DRV_SetPll -Enable or disable SPLL clock source
   - clockMan1_CLOCK_DRV_SetLpo -Enable or disable LPO clock source

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_ClearPending -Clear Pending Interrupt.
   - intMan1_INT_SYS_SetPending -Set Pending Interrupt.
   - intMan1_INT_SYS_GetPending -Get Pending Interrupt.
   - intMan1_INT_SYS_GetActive -Get Active Interrupt.

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This function configures the pins with the options provided in the provided structure
   - pin_mux_PINS_DRV_SetPullSel -This function configures the internal resistor
   - pin_mux_PINS_DRV_SetMuxModeSel -This function configures the pin muxing
   - pin_mux_PINS_DRV_SetPinIntSel -This function configures the port pin interrupt/DMA request
   - pin_mux_PINS_DRV_GetPinIntSel -This function gets the current port pin interrupt/DMA request configuration
   - pin_mux_PINS_DRV_ClearPinIntFlagCmd -This function clears the individual pin-interrupt status flag
   - pin_mux_PINS_DRV_EnableDigitalFilter -This function enables digital filter feature for digital pin muxing
   - pin_mux_PINS_DRV_DisableDigitalFilter -This function disables digital filter feature for digital pin muxing
   - pin_mux_PINS_DRV_ConfigDigitalFilter -This function configures digital filter for port with given configuration
   - pin_mux_PINS_DRV_GetPortIntFlag -This function reads the entire port interrupt status flag
   - pin_mux_PINS_DRV_ClearPortIntFlagCmd -This function clears the entire port interrupt status flag
   - pin_mux_PINS_DRV_SetGlobalPinControl -This function quickly configures multiple pins within the one port for the same 
                peripheral function with the same pin configuration
   - pin_mux_PINS_DRV_SetGlobalIntControl -This function quickly configures multiple pins within the one port for the same 
                peripheral function with the same interrupt configuration
   - pin_mux_PINS_DRV_GetPinsDirection -This function returns the current pins directions for a port. Pins corresponding to 
                bits with value of '1' are configured as output and pins corresponding to bits with value of '0' are configured 
                as input.
   - pin_mux_PINS_DRV_SetPinDirection -This function configures the direction for the given pin, with the given value('1' for 
                pin to be configured as output and '0' for pin to be configured as input)
   - pin_mux_PINS_DRV_SetPinsDirection -This function sets the direction configuration for all pins in a port. Pins 
                corresponding to bits with value of '1' will be configured as output and pins corresponding to bits with value 
                of '0' will be configured as input.
   - pin_mux_PINS_DRV_SetPortInputDisable -This function sets the pins input state for a port. Pins corresponding to bits with 
                value of '1' will not be configured as input and pins corresponding to bits with value of '0' will be 
                configured as input
   - pin_mux_PINS_DRV_GetPortInputDisable -This function returns the current pins input state for a port. Pins corresponding to 
                bits with value of '1' are not configured as input and pins corresponding to bits with value of '0' are 
                configured as input
   - pin_mux_PINS_DRV_WritePin -This function writes the given pin from a port, with the given value ('0' represents LOW, '1' 
                represents HIGH)
   - pin_mux_PINS_DRV_WritePins -This function writes all pins configured as output with the values given in the parameter pins.
                '0' represents LOW, '1' represents HIGH
   - pin_mux_PINS_DRV_GetPinsOutput -This function returns the current output that is written to a port. Only pins that are 
                configured as output will have meaningful values
   - pin_mux_PINS_DRV_SetPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                value of 'set' (HIGH). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ClearPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                'cleared' value (LOW). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_TogglePins -This function toggles output pins listed in parameter pins (bits that are '1'). Pins 
                corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ReadPins -This function returns the current input values from a port. Only pins configured as input will 
                have meaningful values

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "ethernet1" (component enet)
   - ethernet1_ENET_DRV_GetDefaultConfig -Gets the default configuration structure.
   - ethernet1_ENET_DRV_Init -Initializes the ENET module.
   - ethernet1_ENET_DRV_Deinit -Deinitializes the ENET module.
   - ethernet1_ENET_DRV_ReadFrame -Reads a received Ethernet frame.
   - ethernet1_ENET_DRV_ProvideRxBuff -Provides a receive buffer to be used by the driver for reception.
   - ethernet1_ENET_DRV_SendFrame -Sends an Ethernet frame.
   - ethernet1_ENET_DRV_GetTransmitStatus -Checks if the transmission of a buffer is complete and extracts information related 
                to the transmission.
   - ethernet1_ENET_DRV_EnableMDIO -Enables the MDIO interface.
   - ethernet1_ENET_DRV_MDIORead -Reads the selected register of the PHY.
   - ethernet1_ENET_DRV_MDIOWrite -Writes the selected register of the PHY.
   - ethernet1_ENET_DRV_SetMacAddr -Configures the physical address of the MAC.
   - ethernet1_ENET_DRV_GetMacAddr -Gets the physical address of the MAC.
   - ethernet1_ENET_DRV_SetUnicastForward -Enables/Disables forwarding of unicast traffic having a specific MAC address as 
                destination.
   - ethernet1_ENET_DRV_SetMulticastForward -Enables/Disables forwarding of multicast traffic having a specific MAC address as 
                destination.
   - ethernet1_ENET_DRV_SetMulticastForwardAll -Enables/Disables forwarding of the multicast traffic, irrespective of the 
                destination MAC address.
   - ethernet1_ENET_DRV_SetSleepMode -Sets the MAC in sleep mode or normal mode.
   - ethernet1_ENET_DRV_ConfigCounters -Enables/Disables the MIB counters.
   - ethernet1_ENET_DRV_GetCounter -Gets statistics from the specified counter.
   - ethernet1_ENET_DRV_TimerInit -Initializes the adjustable timer using the given configuration and enables it.
   - ethernet1_ENET_DRV_TimerStart -Starts the timer.
   - ethernet1_ENET_DRV_TimerStop -Stops the timer.
   - ethernet1_ENET_DRV_TimerSet -Sets the value of the timer.
   - ethernet1_ENET_DRV_TimerGet -Gets the value of the timer.
   - ethernet1_ENET_DRV_TimerSetCorrection -Sets the timer correction period and correction increment value.
   - ethernet1_ENET_DRV_TimerEnableChannel -Configures and enables a specific timer channel.
   - ethernet1_ENET_DRV_TimerSetCompare -Sets the compare value for a channel configured as output compare.
   - ethernet1_ENET_DRV_TimerGetCapture -Gets the last value captured on a specific channel configured as input capture.
   - ethernet1_ENET_DRV_TimerSetPulseWidth -Sets the pulse width for a channel configured as output compare with output in 
                pulse mode.

Module "dmaController1" (component edma)
   - dmaController1_EDMA_DRV_Init -Initializes the eDMA module.
   - dmaController1_EDMA_DRV_Deinit -Shuts down the eDMA module.
   - dmaController1_EDMA_DRV_ChannelInit -Initializes a eDMA channel.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA channel.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA channel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA channel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA channel.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA channel status.
   - dmaController1_EDMA_DRV_PushConfigToReg -Copies the channel configuration to the TCD registers.
   - dmaController1_EDMA_DRV_PushConfigToSTCD -Copies the channel configuration to the software TCD structure.
   - dmaController1_EDMA_DRV_ConfigSingleBlockTransfer -Configures a simple single block data transfer with DMA. This function 
                configures the descriptor for a single block transfer.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in loop mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_ConfigMultiBlockTransfer -Configures a multiple block data transfer with DMA. This function 
                configures the descriptor for a multi block transfer.
   - dmaController1_EDMA_DRV_CancelTransfer -Cancels the remaining data transfer.
   - dmaController1_EDMA_DRV_SetChannelRequest -Configures the DMA request for the eDMA channel.
   - dmaController1_EDMA_DRV_ClearTCD -Clears all registers to 0 for the channel's TCD.
   - dmaController1_EDMA_DRV_SetSrcAddr -Configures the source address for the eDMA channel.
   - dmaController1_EDMA_DRV_SetSrcOffset -Configures the source address signed offset for the eDMA channel.
   - dmaController1_EDMA_DRV_SetSrcReadChunkSize -Configures the source data chunk size (transferred in a read sequence).
   - dmaController1_EDMA_DRV_SetDestAddr -Configures the destination address for the eDMA channel.
   - dmaController1_EDMA_DRV_SetDestOffset -Configures the destination address signed offset for the eDMA channel.
   - dmaController1_EDMA_DRV_SetDestWriteChunkSize -Configures the destination data chunk size (transferred in a write sequence)
                .
   - dmaController1_EDMA_DRV_SetMinorLoopBlockSize -Configures the number of bytes to be transferred in each service request of 
                the channel.
   - dmaController1_EDMA_DRV_SetMajorLoopIterationCount -Configures the number of major loop iterations.
   - dmaController1_EDMA_DRV_GetRemainingMajorIterationsCount -Returns the remaining major loop iteration count.
   - dmaController1_EDMA_DRV_SetScatterGatherLink -Configures the memory address of the next TCD, in scatter/gather mode.
   - dmaController1_EDMA_DRV_DisableRequestsOnTransferComplete -Disables/Enables the DMA request after the major loop completes 
                for the TCD.
   - dmaController1_EDMA_DRV_SetSrcLastAddrAdjustment -Configures the source address last adjustment.
   - dmaController1_EDMA_DRV_SetDestLastAddrAdjustment -Configures the destination address last adjustment.
   - dmaController1_EDMA_DRV_ConfigureInterrupt -Disables/Enables the channel interrupt requests.
   - dmaController1_EDMA_DRV_TriggerSwRequest -Triggers a sw request for the current channel.

Module "phy1"      (component phy)
   - phy1_PHY_FrameworkInit -Initializes the PHY driver.
   - phy1_PHY_Init -Initializes the specified PHY device.
   - phy1_PHY_Reset -Resets the specified PHY device.
   - phy1_PHY_MainFunction -Provides polling support, by handling specific events.
   - phy1_PHY_GetId -Gets the ID of the specified PHY device.
   - phy1_PHY_GetLinkStatus -Gets the link status for the specified PHY device.
   - phy1_PHY_GetLinkSpeed -Gets the link speed for the specified PHY device.
   - phy1_PHY_Suspend -Suspends the specified PHY device.
   - phy1_PHY_Resume -Resumes the specified PHY device.
   - phy1_PHY_Sleep -Sends a sleep request to the specified PHY device.
   - phy1_PHY_Wakeup -Wakes up the specified PHY device.
   - phy1_PHY_SetRole -Sets the role of the specified PHY device.
   - phy1_PHY_SetLoopback -Sets the loopback mode for the specified PHY device.
   - phy1_PHY_EnableInterrupts -Enables interrupts for the specified PHY device.
   - phy1_PHY_HandleInterrupt -Handles interrupts for the specified PHY device.
   - phy1_PHY_EnableAutoneg -Enables auto-negotiation for the specified PHY device.
   - phy1_PHY_DisableAutoneg -Disables auto-negotiation for the specified PHY device.
   - phy1_PHY_RestartAutoneg -Restarts auto-negotiation for the specified PHY device.
   - phy1_PHY_Write -Writes a register of the specified PHY device.
   - phy1_PHY_Read -Reads a register of the specified PHY device.
   - phy1_PHY_RMR -Reads and modifies a register of the specified PHY device.

Module "Cpu"       (component S32K148_144)
   - Cpu_SystemInit -This function disables the watchdog, enables FPU and the power mode protection. SystemInit is called from 
                startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock. It must be called whenever the core clock is changed during program execution
   - Cpu_SystemSoftwareReset -This method initiates initiate a system reset.

===================================================================================
